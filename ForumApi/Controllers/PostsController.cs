using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ForumApi.Models;
using ForumApi.Models.PostDTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace ForumApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PostsController : ControllerBase
    {
        private readonly ForumContext context;
        public PostsController(ForumContext context)
        {
            this.context = context;

            if (context.Posts.Count() == 0 && context.Users.Count() != 0)
            {
                context.Posts.Add(new Post()
                {
                    User = context.Users.Find(1),
                    Content = "Welcome to my forum, this is the very first autogenerated post!",
                    PostDate = DateTime.Now
                });
                context.Posts.Add(new Post()
                {
                    User = context.Users.Find(2),
                    Content = "Its good to see that its working!",
                    PostDate = DateTime.Now.AddDays(1)
                });
                context.SaveChanges();
            }
        }

        // GET: api/Post
        [HttpGet]
        public IActionResult Get()
        {
            var res = context.Posts
                            .Include(u => u.User)
                            .Include(c => c.Comments)
                                .ThenInclude(u => u.User);

            var result = res.Select(p => Models.Post.PostToDTO(p));

            return Ok(result);
        }

        // GET: api/Post/5
        [HttpGet("{id}", Name = "GetPosts")]
        public IActionResult Get(int id)
        {
            var res = context.Posts
                                .Include(u => u.User)
                                .Include(c => c.Comments)
                                    .ThenInclude(u => u.User)
                                .Where(p => p.PostId == id).FirstOrDefault();

            if (res != null)
            {
                return Ok(Models.Post.PostToDTO(res));
            } else
            {
                return NotFound("Sorry, couldnt find the post");
            }
        }

        //Get : api/Posts/5/comments
        [HttpGet("{id}/comments", Name = "GetPostComments")]
        public IActionResult GetPostCommets(int id)
        {
            var res = context.Posts
                                .Include(c => c.Comments)
                                    .ThenInclude(u => u.User)
                                .Where(p => p.PostId == id).FirstOrDefault();

            return Ok(Comment.CommentToDTO(res.Comments));
        }

        // POST: api/Post
        [HttpPost]
        public IActionResult Post([FromBody] Post_PostDTO post)
        {
            if (post != null)
            {
                if (post.User != null)
                {
                    try
                    {
                        context.Posts.Add(new Post
                        {
                            PostDate = post.PostDate,
                            User = context.Users.Find(post.User.UserId),
                            Content = post.Content,
                            Title = post.Title
                        });

                        context.SaveChanges();

                        return NoContent();
                    }
                    catch (Exception ex)
                    {
                        return BadRequest(ex.Message);
                    }
                } else
                {
                    return BadRequest("Post must have a user");
                }
            } else
            {
                return BadRequest("Cannot post empty post");
            }
        }

        // PUT: api/Post/5
        [HttpPut("{id}")]
        public IActionResult Put(int id, [FromBody] Post_PostDTO value)
        {
            if (value != null)
            {
                try
                {
                    var post = context.Posts.Find(value.PostId);

                    post.Content = value.Content;
                    post.Title = value.Title;

                    context.Posts.Update(post);

                    context.SaveChanges();

                    return NoContent();
                }
                catch (Exception ex)
                {
                    return BadRequest(ex.Message);
                }
            } else
            {
                return BadRequest("Cannot update empty post");
            }
        }

        // DELETE: api/ApiWithActions/5
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var item = context.Posts.Find(id);

            if (item != null)
            {
                context.Posts.Remove(item);
                context.SaveChanges();

                return NoContent();
            }

            return NotFound("Der opstod en fejl");
        }
    }
}
